@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<div class="cart-item">
	<img src="@ImageUrl" alt="Product Image" class="cart-item-image" />
	<p>@cartItemName</p>
	<p><input type="number" class="cart-item-quantity" min="1" max="10" @bind="amount" @onfocusout="changeAmount"/> Ilość</p>
	<p>@cartItemPrice zł</p>
	<button class="del-btn" @onclick="() => deleteFromCart()"><img src="@trashIconUrl" /></button>
</div>
@code {

	[Parameter] public string ImageUrl { get; set; } = string.Empty;
	[Parameter] public string trashIconUrl { get; set; } = string.Empty;
	[Parameter] public string cartItemName { get; set; } = string.Empty;
	[Parameter] public float cartItemPrice { get; set; } = 0.0f;
	[Parameter] public int amount { get; set; } = 1;
	[Parameter] public int prodId { get; set; }
	[Parameter] public EventCallback OnItemDeleted { get; set; }
	[Parameter] public EventCallback OnAmountChanged { get; set; }

	private async Task deleteFromCart()
	{
		var productsInCart = await LocalStorage.GetItemAsync<List<CarItemModel>>("cartItems");

		if(productsInCart != null)
		{
			var prodToDelete = productsInCart.FirstOrDefault(prod => prod.Id == prodId);

			if(prodToDelete != null)
			{
				productsInCart.Remove(prodToDelete);
				await LocalStorage.SetItemAsync<List<CarItemModel>>("cartItems", productsInCart);
				await OnItemDeleted.InvokeAsync();
			}
		}
	}

	private async Task changeAmount()
	{
		var productsInCart = await LocalStorage.GetItemAsync<List<CarItemModel>>("cartItems");

		if (productsInCart != null)
		{
			var productToUpdate = productsInCart.FirstOrDefault(prod => prod.Id == prodId);

			if (productToUpdate != null)
			{
				productToUpdate.amount = amount;
				await LocalStorage.SetItemAsync<List<CarItemModel>>("cartItems", productsInCart);
				await OnItemDeleted.InvokeAsync();
			}
		}
	}
}
