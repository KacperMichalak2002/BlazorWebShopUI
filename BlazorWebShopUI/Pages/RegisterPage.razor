@page "/register"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="page-container">
	<div class="register-panel">
		<h3>Zarejestruj się</h3>

		<EditForm Model="@userRegistration" OnValidSubmit="@RegisterUser">
			<DataAnnotationsValidator />

			<div class="form-group">
				<InputText @bind-Value="userRegistration.firstName" placeholder="Imię" class="reg-input"/>
				<ValidationMessage For="@(() => userRegistration.firstName)" />
			</div>
			<div class="form-group">
				<InputText @bind-Value="userRegistration.lastName" placeholder="Nazwisko" class="reg-input" />
				<ValidationMessage For="@(() => userRegistration.lastName)" />
			</div>
			<div class="form-group">
				<InputText @bind-Value="userRegistration.email" placeholder="Email" class="reg-input" />
				<ValidationMessage For="@(() => userRegistration.email)" />
			</div>
			<div class="form-group">
				<InputText @bind-Value="userRegistration.password" type="password" placeholder="Hasło" class="reg-input" />
				<ValidationMessage For="@(() => userRegistration.password)" />
			</div>
			<div class="form-group">
				<InputText @bind-Value="userRegistration.ConfirmPassword" type="password" placeholder="Potwierdź hasło" class="reg-input" />
				<ValidationMessage For="@(() => userRegistration.ConfirmPassword)" />
			</div>
			<button type="submit" class="register-btn" disabled="@isRegistering">
				@if(isRegistering)
				{
					<span>Rejestracja...</span>
				}
				else
				{
					<span>Zarejestruj</span>
				}
			</button>

		</EditForm>

		<p> Masz juz konto? <a class="login-link" @onclick="() => NavigateToLogin()">Zaloguj się</a></p>

	</div>
</div>

@code {

	private UserRegistration userRegistration = new UserRegistration();
	private bool isRegistering = false;
	private string errorMessage = string.Empty;
	private string successMessage = string.Empty;

	private void NavigateToLogin()
	{
		Navigation.NavigateTo("/login");
	}

	private async Task RegisterUser()
	{
		isRegistering = true;
		errorMessage = string.Empty;
		successMessage = string.Empty;

		try
		{
			if(userRegistration.password != userRegistration.ConfirmPassword)
			{
				errorMessage = "Hasła nie pasują do siebie.";
				return;
			}

			await RegisterToLocalStorage();

			await Task.Delay(2000);
			NavigateToLogin();
		}catch(Exception e)
		{
			errorMessage = "Wystąpił błąd podczas rejestracji: " + e.Message;
		}
	}

	protected async Task RegisterToLocalStorage()
	{
		await localStorage.RemoveItemAsync("registeredUser");
		await localStorage.SetItemAsync("registeredUser", userRegistration);
	}
}
